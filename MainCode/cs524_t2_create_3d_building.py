# -*- coding: utf-8 -*-
"""CS524-T2-Create_3D_building

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12OefKJE2y9nZYQcztLYdAsJEwvNDcvup

# Create a 3D Visualization based on Chicago map with building height

Dataset link:


*   [Traffic Crashes](https://data.cityofchicago.org/Transportation/Traffic-Crashes-Crashes/85ca-t3if/about_data)
*   [Chicago Street](https://data.cityofchicago.org/Transportation/Street-Center-Lines/6imu-meau)
*   [Chicago Boundary](https://data.cityofchicago.org/Facilities-Geographic-Boundaries/Boundaries-City/ewy2-6yfk)
"""



!pip install pandas pysolar pytz
!pip install sodapy
!pip install geojson
!pip install pydeck

import pandas as pd
import requests
import altair as alt
import matplotlib.pyplot as plt
from sodapy import Socrata
from shapely.geometry import Polygon, MultiPolygon
from shapely.geometry import shape
import geojson
import numpy as np

from google.colab import drive
drive.mount('/content/gdrive')

path = "/content/gdrive/MyDrive/CS 524/CS 524 - shared folder/Project/Dataset"

import pydeck as pdk
import geopandas as gpd
from shapely.geometry import Point, LineString, Polygon

# Load the datasets
Building_Height_File = path + '/ChicagoBuildingsHeight_OpenStreetMap.geojson'
Chicago_Boundary_File = path + '/Chicago_City_Boundary.csv'
Chicago_Streets_File = path + '/Chicago_Streets.csv'

gdf_buildings = gpd.read_file(Building_Height_File)

# Load and process the boundary CSV
df_boundary = pd.read_csv(Chicago_Boundary_File)

# Load and process the streets CSV
df_streets = pd.read_csv(Chicago_Streets_File)

# Convert the 'the_geom' column to a geometry object
gdf_boundary = gpd.GeoDataFrame(df_boundary, geometry=gpd.GeoSeries.from_wkt(df_boundary['the_geom']))
# Convert the 'the_geom' column to a geometry object
gdf_streets = gpd.GeoDataFrame(df_streets, geometry=gpd.GeoSeries.from_wkt(df_streets['the_geom']))

# Set an initial CRS for boundary and streets if not already set
gdf_boundary = gdf_boundary.set_crs('EPSG:4326')
gdf_streets = gdf_streets.set_crs('EPSG:4326')

gdf_buildings = gdf_buildings.to_crs('EPSG:4326')
gdf_boundary = gdf_boundary.to_crs('EPSG:4326')
gdf_streets = gdf_streets.to_crs('EPSG:4326')

# Convert height to numeric, replacing non-numeric values with a default height
gdf_buildings['height'] = pd.to_numeric(gdf_buildings['height'], errors='coerce').fillna(10)

crashes_df = pd.read_csv('/content/gdrive/MyDrive/CS 524/CS 524 - shared folder/Project/Dataset/Traffic_Crashes.csv', engine="pyarrow")



# check the structure of CSV files
print(df_boundary.columns)
print(df_streets.columns)

"""Verify Geometry Format and CRS"""

print(gdf_buildings.crs)
print(gdf_boundary.crs)
print(gdf_streets.crs)

print(gdf_buildings['geometry'].head())

print(gdf_buildings['height'].describe())

# Create a PyDeck layer for 3D buildings
building_layer = pdk.Layer(
    'PolygonLayer',
    gdf_buildings,
    get_polygon='geometry.coordinates',  # Ensure coordinates are correctly parsed
    get_elevation='height',  # Elevation based on the height column
    elevation_scale=1,  # Adjust elevation scale as needed
    extruded=True,  # Keep this for 3D effect
    get_fill_color='[255, (1 - height / 300) * 255, (1 - height / 300) * 255, 200]',
    get_line_color=[255, 255, 255],
    auto_highlight=True,
    pickable=True,
)

# Modify the boundary layer to be a simple 2D layer
boundary_layer = pdk.Layer(
    'GeoJsonLayer',
    gdf_boundary.__geo_interface__,
    opacity=0.8,
    stroked=True,
    filled=True,
    extruded=False,  # Remove the 3D effect
    wireframe=True,
    get_line_color=[255, 255, 255],
    get_fill_color=[200, 200, 200, 50],
    get_line_width=20,
)

# Create a layer for Chicago streets
street_layer = pdk.Layer(
    'GeoJsonLayer',
    gdf_streets.__geo_interface__,
    opacity=0.8,
    stroked=True,
    get_line_color=[255, 255, 255],
    get_line_width=1,
)

# Set the viewport location
view_state = pdk.ViewState(
    latitude=41.8781,  # Latitude of Chicago
    longitude=-87.6298,  # Longitude of Chicago
    zoom=12,
    pitch=45,
    bearing=0
)

# Create the deck with the updated layers
deck = pdk.Deck(
    layers=[street_layer, building_layer],  # Exclude boundary layer
    initial_view_state=view_state,
    map_style='dark',
)

# Display the deck
deck.to_html('chicago_3d_buildings_with_city_map.html')

